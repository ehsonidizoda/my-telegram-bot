import sqlite3
import logging
from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, CallbackContext

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = 'YOUR_BOT_TOKEN_HERE'
ADMIN_ID = 7605086289
DB_NAME = 'database.db'
WELCOME_VOICE = 'welcome.ogg'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(TOKEN)
db = sqlite3.connect(DB_NAME, check_same_thread=False)
cursor = db.cursor()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
def init_db():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY, 
            lang TEXT DEFAULT 'ru',
            is_verified INTEGER DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS codes (
            code TEXT PRIMARY KEY, 
            file_id TEXT,
            description TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            title TEXT, 
            url TEXT UNIQUE
        )
    ''')
    db.commit()

# --- –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
def get_sub_buttons():
    cursor.execute("SELECT title, url FROM channels")
    channels = cursor.fetchall()
    
    buttons = []
    for title, url in channels:
        buttons.append([InlineKeyboardButton(title, url=url)])
    
    buttons.append([InlineKeyboardButton("‚úÖ –Ø –Ω–µ —Ä–æ–±–æ—Ç", callback_data="verify")])
    return InlineKeyboardMarkup(buttons)

# --- /start –∫–æ–º–∞–Ω–¥–∞ ---
def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    cursor.execute(
        "INSERT OR IGNORE INTO users (id) VALUES (?)",
        (user_id,)
    )
    db.commit()
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        with open(WELCOME_VOICE, 'rb') as voice_file:
            update.message.reply_voice(voice=voice_file)
    except FileNotFoundError:
        logger.error(f"Voice file {WELCOME_VOICE} not found!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    update.message.reply_text(
        "‚ö†Ô∏è –ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞–Ω–∏ –±–æ—Ç –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –º–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:",
        reply_markup=get_sub_buttons()
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
def check_subscription(user_id: int) -> bool:
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return True

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if data == "verify":
        if check_subscription(user_id):
            cursor.execute(
                "UPDATE users SET is_verified=1 WHERE id=?",
                (user_id,)
            )
            db.commit()
            query.answer()
            query.edit_message_text("üëã –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ –±–æ—Ç–∏ –º–æ!\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚úçüèª –õ—É—Ç—Ñ–∞–Ω —Ä–∞–º–∑—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥...")
        else:
            query.answer("‚ùå –®—É–º–æ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ—Ä–æ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥!", show_alert=True)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    elif data.startswith("del_"):
        try:
            message_id = int(data.split("_")[1])
            context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=message_id
            )
            query.answer()
        except Exception as e:
            logger.error(f"Error deleting message: {e}")
            query.answer("‚ùå –•–∞—Ç–æ –¥–∞—Ä “≥–∞–∑—Ñ –∫–∞—Ä–¥–∞–Ω!")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤ ---
def handle_code(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    code = update.message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT is_verified FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()
    
    if not user or not user[0]:
        update.message.reply_text(
            "‚ùå –ò–ª—Ç–∏–º–æ—Å –∞–≤–≤–∞–ª –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!",
            reply_markup=get_sub_buttons()
        )
        return
    
    # –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ –±–∞–∑–µ
    cursor.execute(
        "SELECT file_id, description FROM codes WHERE code=?",
        (code,)
    )
    result = cursor.fetchone()
    
    if result:
        file_id, description = result
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ö–∞–Ω–∞–ª—ã –∫–æ–¥–æ–≤", url="https://t.me/example1"),
                InlineKeyboardButton("VIP", url="https://t.me/example2")
            ],
            [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=code)],
            [InlineKeyboardButton("Instagram", url="https://instagram.com/example")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{update.message.message_id}")]
        ])
        
        update.message.reply_video(
            video=file_id,
            caption=description,
            reply_markup=keyboard
        )
    else:
        update.message.reply_text("‚ùå –†–∞–º–∑ —ë—Ñ—Ç –Ω–∞—à—É–¥!")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    init_db()
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_code))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    logger.info("Bot started polling...")
    updater.idle()

if __name__ == '__main__':
    main()